{
"version":3,
"file":"module$node_modules$string_similarity$compare_strings.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/string-similarity/compare-strings.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$string_similarity$compare_strings\"] = function(global,process,require,module,exports,shadow$shims) {\nvar _forEach = require('lodash.foreach');\nvar _map = require('lodash.map');\nvar _every = require('lodash.every');\nvar _maxBy = require('lodash.maxby');\nvar _flattenDeep = require('lodash.flattendeep');\n\nexports.compareTwoStrings = compareTwoStrings;\nexports.findBestMatch = findBestMatch;\n\nfunction compareTwoStrings(str1, str2) {\n  var result = null;\n  result = calculateResultIfIdentical(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfEitherIsEmpty(str1, str2);\n  if (result != null) {\n    return result;\n  }\n  result = calculateResultIfBothAreSingleCharacter(str1, str2);\n  if (result != null) {\n    return result;\n  }\n\n  var pairs1 = wordLetterPairs(str1.toUpperCase());\n  var pairs2 = wordLetterPairs(str2.toUpperCase());\n  var intersection = 0;\n  var union = pairs1.length + pairs2.length;\n\n  _forEach(pairs1, function (pair1) {\n    for(var i = 0; i < pairs2.length; i++) {\n      var pair2 = pairs2[i];\n      if (pair1 === pair2) {\n        intersection++;\n        pairs2.splice(i, 1);\n        break;\n      }\n    }\n  });\n\n  return (2.0 * intersection) / union;\n\n  // private functions ---------------------------\n  function letterPairs(str) {\n    var numPairs = str.length - 1;\n    var pairs = [];\n    for(var i = 0; i < numPairs; i++) {\n      pairs[i] = str.substring(i, i + 2);\n    }\n    return pairs;\n  }\n\n  function wordLetterPairs(str) {\n    return _flattenDeep(_map(str.split(' '), letterPairs));\n  }\n\n  function calculateResultIfIdentical(str1, str2) {\n    if (str1.toUpperCase() == str2.toUpperCase()) {\n      return 1;\n    }\n    return null;\n  }\n\n  function calculateResultIfBothAreSingleCharacter(str1, str2) {\n    if (str1.length == 1 && str2.length == 1) {\n      return 0;\n    }\n  }\n\n  function calculateResultIfEitherIsEmpty(str1, str2) {\n    // if both are empty strings\n    if (str1.length == 0 && str2.length == 0) {\n      return 1;\n    }\n\n    // if only one is empty string\n    if ((str1.length + str2.length) > 0 && (str1.length * str2.length) == 0) {\n      return 0;\n    }\n    return null;\n  }\n}\n\n\nfunction findBestMatch(mainString, targetStrings) {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n  var ratings = _map(targetStrings, function (targetString) {\n    return {\n      target: targetString,\n      rating: compareTwoStrings(mainString, targetString)\n    };\n  });\n\n  return {\n    ratings: ratings,\n    bestMatch: _maxBy(ratings, 'rating')\n  };\n\n  // private functions ---------------------------\n  function areArgsValid(mainString, targetStrings) {\n    var mainStringIsAString = (typeof mainString === 'string');\n\n    var targetStringsIsAnArrayOfStrings = Array.isArray(targetStrings) &&\n      targetStrings.length > 0 &&\n      _every(targetStrings, function (targetString) {\n        return (typeof targetString === 'string');\n      });\n\n    return mainStringIsAString && targetStringsIsAnArrayOfStrings;\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","compareTwoStrings","str1","str2","letterPairs","str","numPairs","length","pairs","i","substring","result","calculateResultIfIdentical","toUpperCase","pairs1","_flattenDeep","_map","split","pairs2","intersection","union","_forEach","pair1","pair2","splice","_every","_maxBy","findBestMatch","mainString","targetStrings","areArgsValid","mainStringIsAString","targetStringsIsAnArrayOfStrings","Array","isArray","targetString","Error","ratings","target","rating","bestMatch"]
}
