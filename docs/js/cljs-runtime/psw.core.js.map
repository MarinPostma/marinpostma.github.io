{"version":3,"sources":["psw/core.cljs"],"mappings":"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","names":["psw.core/router","reitit.frontend.router.cljs$core$IFn$_invoke$arity$1","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","psw.core/path-for","p__54575","vec__54576","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq54573","G__54574","cljs.core/first","cljs.core/next","self__4776__auto__","route","params","reitit.frontend.match_by_name.cljs$core$IFn$_invoke$arity$3","reitit.frontend.match_by_name.cljs$core$IFn$_invoke$arity$2","psw.core/contact-page","psw.core/page-for","G__54579","cljs.core/Keyword","psw.pages.home-page/home-page","psw.pages.project-page/project-page","psw.pages.about-page/about-page","js/Error","psw.core/header","psw.icons/github","psw.icons/linkedin","psw.core/footer","psw.core/current-page","page","reagent.session/get","psw.core/mount-root","reagent.core.render.cljs$core$IFn$_invoke$arity$2","js/document","psw.core/init!","clerk.core/initialize!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.core/after-render","clerk.core/after-render!","reagent.session/put!","clerk.core/navigate-page!","cljs.core/boolean","accountant.core/dispatch-current!"],"sourcesContent":["(ns psw.core\n  (:require\n   [psw.icons :refer [linkedin, github, clojure]]\n   [reagent.core :as reagent :refer [atom]]\n   [reagent.session :as session]\n   [reitit.frontend :as reitit]\n   [clerk.core :as clerk]\n   [psw.pages.home-page :refer [home-page]]\n   [psw.pages.about-page :refer [about-page]]\n   [psw.pages.project-page :refer [project-page]]\n   [accountant.core :as accountant]))\n\n;; -------------------------\n;; Routes\n\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/contact\" :contact]\n    [\"/about\" :about]\n    [\"/projects\" :projects]]))\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n(path-for :about)\n;; -------------------------\n;; Page components\n\n\n(defn contact-page []\n  (fn []\n    [:div.main\n     [:h1 \"hello\"]]))\n\n\n;; -------------------------\n;; Translate routes -> page components\n\n\n(defn page-for [route]\n  (case route\n    :index #'home-page\n    :projects #'project-page\n    :about #'about-page\n    :contact #'contact-page))\n\n\n;; -------------------------\n;; Page mounting component\n\n\n(defn header []\n  (fn []\n    [:nav\n     [:div.left\n      [:ul\n       [:li>a#title {:href (path-for :index)} \"MP.\"]\n       [:li [:a {:href (path-for :projects)} \"projects\"]]\n       [:li [:a {:href (path-for :about)} \"about\"]]\n       [:li>a {:href (path-for :contact)} \"contact\"]]]\n     [:div.right\n      [:ul\n       [:li>a {:href \"blbab\"} github]\n       [:li>a {:href \"blbab\"} linkedin]]]]))\n\n(defn footer []\n  (fn []\n    [:div#footer\n     [:div [:p \"copyright\\u00A92019 Marin Postma\"]]\n     [:div  [:p \"made with love with \" [:i.icon-clojure]]]]))\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [:div\n       [header]\n       [:div#page-container\n        [page]]\n       [footer]])))\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (reagent/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (clerk/initialize!)\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (reagent/after-render clerk/after-render!)\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})\n        (clerk/navigate-page! path)))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n"]}