shadow$provide.module$node_modules$minimist$index=function(global,process,require,module,exports,shadow$shims){function hasKey(obj,keys){var o=obj;keys.slice(0,-1).forEach(function(key){o=o[key]||{}});return keys[keys.length-1]in o}function isNumber(x){return"number"===typeof x||/^0x[0-9a-f]+$/i.test(x)?!0:/^[-+]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(x)}module.exports=function(args,opts){function argDefined(key,arg){return flags.allBools&&/^--[^=]+$/.test(arg)||flags.strings[key]||flags.bools[key]||
aliases[key]}function setArg(key,val,arg){if(!arg||!flags.unknownFn||argDefined(key,arg)||!1!==flags.unknownFn(arg)){var value=!flags.strings[key]&&isNumber(val)?Number(val):val;setKey(argv,key.split("."),value);(aliases[key]||[]).forEach(function(x){setKey(argv,x.split("."),value)})}}function setKey(obj,keys,value){var o=obj;keys.slice(0,-1).forEach(function(key){void 0===o[key]&&(o[key]={});o=o[key]});obj=keys[keys.length-1];void 0===o[obj]||flags.bools[obj]||"boolean"===typeof o[obj]?o[obj]=value:
Array.isArray(o[obj])?o[obj].push(value):o[obj]=[o[obj],value]}function aliasIsBoolean(key){return aliases[key].some(function(x){return flags.bools[x]})}opts||(opts={});var flags={bools:{},strings:{},unknownFn:null};"function"===typeof opts.unknown&&(flags.unknownFn=opts.unknown);"boolean"===typeof opts["boolean"]&&opts["boolean"]?flags.allBools=!0:[].concat(opts["boolean"]).filter(Boolean).forEach(function(key){flags.bools[key]=!0});var aliases={};Object.keys(opts.alias||{}).forEach(function(key){aliases[key]=
[].concat(opts.alias[key]);aliases[key].forEach(function(x){aliases[x]=[key].concat(aliases[key].filter(function(y){return x!==y}))})});[].concat(opts.string).filter(Boolean).forEach(function(key){flags.strings[key]=!0;aliases[key]&&(flags.strings[aliases[key]]=!0)});var defaults=opts["default"]||{},argv={_:[]};Object.keys(flags.bools).forEach(function(key){setArg(key,void 0===defaults[key]?!1:defaults[key])});var notFlags=[];-1!==args.indexOf("--")&&(notFlags=args.slice(args.indexOf("--")+1),args=
args.slice(0,args.indexOf("--")));for(var i=0;i<args.length;i++){var arg$jscomp$0=args[i];if(/^--.+=/.test(arg$jscomp$0)){var m=arg$jscomp$0.match(/^--([^=]+)=([\s\S]*)$/),key$jscomp$0=m[1];m=m[2];flags.bools[key$jscomp$0]&&(m="false"!==m);setArg(key$jscomp$0,m,arg$jscomp$0)}else if(/^--no-.+/.test(arg$jscomp$0))key$jscomp$0=arg$jscomp$0.match(/^--no-(.+)/)[1],setArg(key$jscomp$0,!1,arg$jscomp$0);else if(/^--.+/.test(arg$jscomp$0))key$jscomp$0=arg$jscomp$0.match(/^--(.+)/)[1],m=args[i+1],void 0===
m||/^-/.test(m)||flags.bools[key$jscomp$0]||flags.allBools||aliases[key$jscomp$0]&&aliasIsBoolean(key$jscomp$0)?/^(true|false)$/.test(m)?(setArg(key$jscomp$0,"true"===m,arg$jscomp$0),i++):setArg(key$jscomp$0,flags.strings[key$jscomp$0]?"":!0,arg$jscomp$0):(setArg(key$jscomp$0,m,arg$jscomp$0),i++);else if(/^-[^-]+/.test(arg$jscomp$0)){key$jscomp$0=arg$jscomp$0.slice(1,-1).split("");for(var broken=!1,j=0;j<key$jscomp$0.length;j++)if(m=arg$jscomp$0.slice(j+2),"-"===m)setArg(key$jscomp$0[j],m,arg$jscomp$0);
else{if(/[A-Za-z]/.test(key$jscomp$0[j])&&/=/.test(m)){setArg(key$jscomp$0[j],m.split("\x3d")[1],arg$jscomp$0);broken=!0;break}if(/[A-Za-z]/.test(key$jscomp$0[j])&&/-?\d+(\.\d*)?(e-?\d+)?$/.test(m)){setArg(key$jscomp$0[j],m,arg$jscomp$0);broken=!0;break}if(key$jscomp$0[j+1]&&key$jscomp$0[j+1].match(/\W/)){setArg(key$jscomp$0[j],arg$jscomp$0.slice(j+2),arg$jscomp$0);broken=!0;break}else setArg(key$jscomp$0[j],flags.strings[key$jscomp$0[j]]?"":!0,arg$jscomp$0)}key$jscomp$0=arg$jscomp$0.slice(-1)[0];
broken||"-"===key$jscomp$0||(!args[i+1]||/^(-|--)[^-]/.test(args[i+1])||flags.bools[key$jscomp$0]||aliases[key$jscomp$0]&&aliasIsBoolean(key$jscomp$0)?args[i+1]&&/true|false/.test(args[i+1])?(setArg(key$jscomp$0,"true"===args[i+1],arg$jscomp$0),i++):setArg(key$jscomp$0,flags.strings[key$jscomp$0]?"":!0,arg$jscomp$0):(setArg(key$jscomp$0,args[i+1],arg$jscomp$0),i++))}else if(flags.unknownFn&&!1===flags.unknownFn(arg$jscomp$0)||argv._.push(flags.strings._||!isNumber(arg$jscomp$0)?arg$jscomp$0:Number(arg$jscomp$0)),
opts.stopEarly){argv._.push.apply(argv._,args.slice(i+1));break}}Object.keys(defaults).forEach(function(key){hasKey(argv,key.split("."))||(setKey(argv,key.split("."),defaults[key]),(aliases[key]||[]).forEach(function(x){setKey(argv,x.split("."),defaults[key])}))});opts["--"]?(argv["--"]=[],notFlags.forEach(function(key){argv["--"].push(key)})):notFlags.forEach(function(key){argv._.push(key)});return argv}}
//# sourceMappingURL=module$node_modules$minimist$index.js.map
