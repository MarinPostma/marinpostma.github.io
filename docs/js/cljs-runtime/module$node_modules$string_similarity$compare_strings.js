shadow$provide.module$node_modules$string_similarity$compare_strings=function(global,process,require,module,exports,shadow$shims){function compareTwoStrings(str1,str2){function letterPairs(str){for(var numPairs=str.length-1,pairs=[],i=0;i<numPairs;i++)pairs[i]=str.substring(i,i+2);return pairs}var result=null;result=function(str1,str2){return str1.toUpperCase()==str2.toUpperCase()?1:null}(str1,str2);if(null!=result)return result;result=0==str1.length&&0==str2.length?1:0<str1.length+str2.length&&0==
str1.length*str2.length?0:null;if(null!=result)return result;result=1==str1.length&&1==str2.length?0:void 0;if(null!=result)return result;str1=_flattenDeep(_map(str1.toUpperCase().split(" "),letterPairs));var pairs2=_flattenDeep(_map(str2.toUpperCase().split(" "),letterPairs)),intersection=0;str2=str1.length+pairs2.length;_forEach(str1,function(pair1){for(var i=0;i<pairs2.length;i++)if(pair1===pairs2[i]){intersection++;pairs2.splice(i,1);break}});return 2*intersection/str2}var _forEach=require("module$node_modules$lodash_DOT_foreach$index"),
_map=require("module$node_modules$lodash_DOT_map$index"),_every=require("module$node_modules$lodash_DOT_every$index"),_maxBy=require("module$node_modules$lodash_DOT_maxby$index"),_flattenDeep=require("module$node_modules$lodash_DOT_flattendeep$index");exports.compareTwoStrings=compareTwoStrings;exports.findBestMatch=function(mainString,targetStrings){if(!function(mainString,targetStrings){mainString="string"===typeof mainString;targetStrings=Array.isArray(targetStrings)&&0<targetStrings.length&&_every(targetStrings,
function(targetString){return"string"===typeof targetString});return mainString&&targetStrings}(mainString,targetStrings))throw Error("Bad arguments: First argument should be a string, second should be an array of strings");targetStrings=_map(targetStrings,function(targetString){return{target:targetString,rating:compareTwoStrings(mainString,targetString)}});return{ratings:targetStrings,bestMatch:_maxBy(targetStrings,"rating")}}}
//# sourceMappingURL=module$node_modules$string_similarity$compare_strings.js.map
