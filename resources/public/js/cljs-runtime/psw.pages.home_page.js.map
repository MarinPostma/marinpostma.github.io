{"version":3,"sources":["psw/pages/home_page.cljs"],"mappings":";;;;;;AAQA,AAAKA,AACH,AAAGC,AACA,AAAA,AAAA,AAACC,AAEmB,AACEC,AAEA,AAACD,AAAQ,AAAA,AAAA,AAAA,AAACE,AACC,AAACC,AAAQC,AAEW,AAAKC,AAAMC;AAAX,AACE,AAAMC,AAAM,AAAA,AAAGD;AAAf,AACE,AAAA,AAAA,AAACN,AAAiB,AAAGQ,AAA6B;AAV3G,AAK+B,AAAA,AAalB,AAAA,AAAGC,AAAgB,AAAA,AAAGD;AAExC,AAAKE,AAAW,AAAA,AAAA,AAAA,AAAA,AAACC,AAAab;AAE9B,AAAA,AAAMc;AAAN,AACE;AAAA,AAAO,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKQC,AAWuC,AAAA,AAAA,AAAAC,AAASJ,AACT,AAAKK;AAAL,AAAgB,AAAA,AAAA,AAAA,AAACC,AAAMN,AAAWO,AAAaF;AAjB9F,AAkB+C,AAAKR;AAAL,AAAY,AAAA,AAACW,AAAMR,AAAWO,AAAiBV;AAlB9F,AAAA,AAAA,AAoB0C,AAAA,AAAA,AAAAO,AAAaJ","names":["psw.pages.home-page/state","js/module$node_modules$javascript_terminal$lib$terminal.EmulatorState","cljs.core/clj->js","js/module$node_modules$javascript_terminal$lib$terminal.CommandMapping","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/module$node_modules$javascript_terminal$lib$terminal.defaultCommandMapping","state","opts","input","js/module$node_modules$javascript_terminal$lib$terminal.OutputFactory","js/module$node_modules$javascript_terminal$lib$terminal.Outputs","psw.pages.home-page/state-atom","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","psw.pages.home-page/home-page","js/module$node_modules$react_terminal_component$lib$react_terminal_component.ReactTerminalStateless","cljs.core/deref","new-state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4"],"sourcesContent":["(ns psw.pages.home-page\n  (:require\n    [\"react-terminal-component\" :refer [ReactTerminal, ReactTerminalStateless]]\n   [reagent.core :as reagent :refer [atom]]\n    [cljs.pprint :refer [pprint]]\n    [\"javascript-terminal\" :refer [EmulatorState, Outputs, defaultCommandMapping, OutputFactory, CommandMapping]]))\n\n\n(def state\n  (. EmulatorState create  \n     (clj->js \n       { \n        \"commandMapping\" (. \n                           CommandMapping \n                           create \n                           (clj->js (assoc \n                                      (js->clj defaultCommandMapping) \n                                      \"help\" {\n                                               \"function\" (fn [state opts]\n                                                            (let [input (. opts join \" \") ]\n                                                              (clj->js {:output (. OutputFactory makeTextOutput (str \n\"The following commands are available:\n\\t- resume: downloads a copy of my resume\n\\t- projects: go to my projects page\n\\t- bio: go to my bio page\"))}) \n                                                              ))\n                                               \"optDef\" {}\n                                               })))\n        \"outputs\" (. Outputs create [(. OutputFactory makeTextOutput \"Welcome to Marin's personal website\\nType \\\"help\\\" to get started\")])})))\n\n(def state-atom (atom {:state state :input-str \"\"}))\n\n(defn home-page []\n  (fn [] (let []\n           [:div.main\n            [:div#term-container\n             [:h4 \"Welcome to my website.\"]\n             [:h5 \"Type \\\"help\\\" to get started\"]\n             [:> ReactTerminalStateless {:theme \n                                         {:background \"#282828\"\n                                          :height \"50vh\"\n                                          :promptSymbolColor \"#458588\"\n                                          :spacing \"1%\"\n                                          :fontSize \"1.1rem\"\n                                          :commandColor \"#fbf1c7\"\n                                          :outputColor \"#ebdbb2\"\n                                          :errorOutputColor \"#cc241d\"\n                                          :fontFamily \"Cutive Mono\"}\n                                         :promptSymbol \"\\u03BB \"\n                                         :emulatorState (:state @state-atom)\n                                         :onStateChange (fn [new-state] (swap! state-atom assoc :state new-state :input-str \"\"))\n                                         :onInputChange (fn [input] (swap! state-atom assoc :input-str input))\n                                         :clickToFocus true\n                                         :inputStr (:input-str @state-atom)}] ]] )))\n\n"]}